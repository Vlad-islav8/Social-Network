{"version":3,"file":"static/js/801.2829b81c.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Main/Dialogs/Dialogs.module.css?6b47","webpack://social-network/./src/components/Main/Dialogs/DialogUsers/Dialogusers.module.css?b28f","webpack://social-network/./src/components/Main/Dialogs/DialogUsers/UserIthem/UserIthem.module.css?44a0","components/Main/Dialogs/DialogUsers/UserIthem/UserIthem.jsx","components/Main/Dialogs/DialogUsers/Dialoguswes.jsx","webpack://social-network/./src/components/Main/Dialogs/Usermessage/Usermessage.module.css?46d0","webpack://social-network/./src/components/Main/Dialogs/Usermessage/Messages/Messages.module.css?12ca","components/Main/Dialogs/Usermessage/Messages/Messages.jsx","components/Main/Dialogs/Usermessage/Usermessage.jsx","components/Main/Dialogs/Dialogs.jsx","redux/selectors/dialogsSelector.ts","components/Main/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogContent\":\"Dialogs_dialogContent__Tvnng\",\"ithem\":\"Dialogs_ithem__1VPtV\",\"dialogUsers\":\"Dialogs_dialogUsers__6JtFV\",\"dialogMessage\":\"Dialogs_dialogMessage__u4Rzz\",\"user\":\"Dialogs_user__MtIAO\"};","// extracted by mini-css-extract-plugin\nexport default {\"usersList\":\"Dialogusers_usersList__Coy0L\"};","// extracted by mini-css-extract-plugin\nexport default {\"itemWrapper\":\"UserIthem_itemWrapper__10xPL\",\"ithem\":\"UserIthem_ithem__xH5h-\"};","import React from \"react\";\r\nimport styles from './UserIthem.module.css'\r\n\r\nfunction Userithem(props) {\r\n    const handleSetActive = () => {\r\n        props.setUserActive(props.id)\r\n    }\r\n    return (\r\n        <div className={styles.itemWrapper}>\r\n            <button onClick={handleSetActive} className={styles.ithem}>\r\n                <img src={props.ava} alt=\"аватар\" />\r\n                <h2>{props.name}</h2>\r\n            </button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Userithem\r\n\r\n","import React from \"react\";\r\nimport styles from './Dialogusers.module.css'\r\nimport Userithem from \"./UserIthem/UserIthem\";\r\nfunction Dialogusers(props) {\r\n\r\n    return (\r\n        <div className={styles.usersList}>\r\n            {\r\n                props.users.map((el) => {\r\n                    return (\r\n                        <Userithem\r\n                            id={el.id}\r\n                            name={el.name}\r\n                            ava={el.ava}\r\n                            messages={el.messages}\r\n                            setUserActive={props.setUserActive}\r\n                            key={el.id}\r\n                            {...props}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogusers;","// extracted by mini-css-extract-plugin\nexport default {\"userMessage\":\"Usermessage_userMessage__7JURs\",\"userInfo\":\"Usermessage_userInfo__Q6Vx3\",\"message\":\"Usermessage_message__HxN6Y\",\"addMessage\":\"Usermessage_addMessage__1wEe6\"};","// extracted by mini-css-extract-plugin\nexport default {\"userMessage\":\"Messages_userMessage__cy7IF\"};","import React from \"react\";\r\nimport styles from './Messages.module.css'\r\nfunction Messages(props) {\r\n    const messages = props.activeUser.messages.map((el) => {\r\n        return (\r\n            <div className={styles.userMessage}>\r\n                <p>{el.message}</p>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div className={styles.userDialog}>\r\n            {messages}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages;","import styles from './Usermessage.module.css';\r\nimport Messages from \"./Messages/Messages\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport {AddPostTextArea} from \"../../../FormComponents/inputs/Inputs\";\r\nfunction Usermessage(props) {\r\n    const activeUserId = props.activeUser\r\n    const activeUser = props.users.find(user => user.id === activeUserId);\r\n    const submit = (values) => {\r\n        props.addMessage(values.addMessage, props.id)\r\n    }\r\n    return (\r\n        <>\r\n            {activeUser ? (\r\n                <div className={styles.userMessage}>\r\n                    <div className={styles.userInfo}>\r\n                        <img src={activeUser.ava} alt={`Ава ${activeUser.name}`} />\r\n                        <h2>{activeUser.name}</h2>\r\n                    </div>\r\n                    <div className={styles.message}>\r\n                        <Messages activeUser={activeUser} />\r\n                    </div>\r\n                    <Formik initialValues={''} onSubmit={props.handleSubmit(submit)}>\r\n                        <Form className={styles.addMessage}>\r\n                        <Field as={AddPostTextArea} name='addMessage' type=\"text\" placeholder=\"Напишите чонить\" />\r\n                        <button>Отправить</button>\r\n                        </Form>\r\n                    </Formik>\r\n                </div>\r\n            ) : (\r\n                <p>Данные не получены</p>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Usermessage;\r\n\r\n","import React from 'react';\r\nimport styles from './Dialogs.module.css'\r\nimport Dialogusers from \"./DialogUsers/Dialoguswes\";\r\nimport Usermessage from './Usermessage/Usermessage';\r\nfunction Dialogs(props) {\r\n    return (\r\n        <div className={styles.dialogContent}>\r\n            <div className={styles.dialogUsers}>\r\n                <h1>Messages</h1>\r\n                <Dialogusers users={props.users} setUserActive={props.setUserActive}/>\r\n            </div>\r\n            <div className={styles.dialogMessage}>\r\n                <Usermessage\r\n                    addMessage={props.addMessage}\r\n                    activeUser={props.activeUser}\r\n                    users={props.users}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import { createSelector } from \"reselect\"\r\nimport {RootState} from \"../reduxStore\";\r\nimport {DialogsStateType} from \"../dialogsReducer\";\r\n\r\nexport const getDialogs = (state:RootState) => {\r\n    return state.dialogs\r\n}\r\n\r\nexport const getDialogUsers = createSelector([getDialogs], \r\n    dialogs => dialogs.users\r\n)\r\n\r\nexport const getActiveUser = createSelector([getDialogs], \r\n    dialogs => dialogs.activeUser\r\n)\r\n","import { connect } from 'react-redux';\r\nimport {withAuthRedirect} from \"../../../Hok/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {isMe} from \"../../../Hok/isMe\";\r\nimport {addMessage, setUserActive} from \"../../../redux/dialogsReducer\";\r\nimport { getActiveUser, getDialogUsers } from '../../../redux/selectors/dialogsSelector';\r\n\r\nconst DialogsContainer = (props) => {\r\n    return <Dialogs {...props}/>\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getDialogUsers(state),\r\n        activeUser: getActiveUser(state)\r\n    }\r\n}\r\nlet mapDispatchToProps =  {\r\n    setUserActive,\r\n    addMessage,\r\n}\r\nexport default compose(\r\n    withAuthRedirect,\r\n    isMe,\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n)(DialogsContainer)\r\n\r\n"],"names":["props","_jsx","className","styles","children","_jsxs","onClick","handleSetActive","setUserActive","id","src","ava","alt","name","users","map","el","Userithem","_objectSpread","messages","activeUser","userMessage","message","userDialog","activeUserId","find","user","_Fragment","concat","Messages","Formik","initialValues","onSubmit","handleSubmit","values","addMessage","Form","Field","as","AddPostTextArea","type","placeholder","Dialogusers","Usermessage","getDialogs","state","dialogs","getDialogUsers","createSelector","getActiveUser","mapDispatchToProps","compose","withAuthRedirect","isMe","connect","Dialogs"],"sourceRoot":""}